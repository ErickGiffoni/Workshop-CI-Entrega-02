# Gitlab repository link: https://gitlab.com/ErickGiffoni/GCES-Workshop-CI-Entrega-02
stages:
  - build
  - test
  - deploy

# Usa uma imagem Docker do Docker para CI
image: docker:20.10.8

services:
  # Docker in Docker: usa para fazer build usando o Dockerfile
  - docker:dind

variables:
  docker_user: $docker_user
  docker_password: $docker_password
  PROJECT_NAME: $docker_user/erickgiffoni_gces_entrega02

build-front:
  stage: build
  before_script:
    - echo "[.] Building frontend..."
  script:
    # Faz o build do frontend usando o Docker
    - docker build -f ./frontend/Dockerfile -t $PROJECT_NAME:build ./frontend
    # Faz login no Docker
    - echo $docker_password | docker login -u $docker_user --password-stdin
    # Publica a imagem construida no Docker Hub do $docker_user
    - docker push $PROJECT_NAME:build
  after_script:
    - echo "[x] Successfully built frontend !"

build-backend:
  stage: build
  before_script:
    - echo "[.] Building backend..."
  script:
    # Faz o build do backend usando o Docker
    - docker build -f ./backend/Dockerfile -t $PROJECT_NAME:build-back ./backend
    # Faz login no Docker
    - echo $docker_password | docker login -u $docker_user --password-stdin
    # Publica a imagem construida no Docker Hub do $docker_user
    - docker push $PROJECT_NAME:build-back
  after_script:
    - echo "[x] Successfully built backend !"

# Configuracoes para os jobs de Teste
    # Usa uma imagem Linux (Alpine) e instala o docker-compose nela

test-frontend:
  image: alpine:3.14
  stage: test
  before_script:
    - echo "[.] Testing frontend..."
    - apk update
    - apk add py-pip python3-dev libffi-dev openssl-dev gcc libc-dev rust cargo make
    - echo "[..] Dependencies for docker-compose installed !"
    - sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - sudo chmod +x /usr/local/bin/docker-compose
  script:
    # Usa o proprio docker-compose para o teste, passando como entrypoint
    # o comando a ser executado
    - docker-compose run --entrypoint "npm run coverage" frontend
  after_script:
    - echo "[x] Frontend successfully tested !"

test-backend:
  image: alpine:3.14
  stage: test
  before_script:
    - echo "[.] Testing backend..."
    - apk update
    - apk add py-pip python3-dev libffi-dev openssl-dev gcc libc-dev rust cargo make
    - echo "[..] Dependencies for docker-compose installed !"
    - sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    - sudo chmod +x /usr/local/bin/docker-compose
  script:
    # Usa o proprio docker-compose para o teste, passando como entrypoint
    # o comando a ser executado
    - docker-compose run --entrypoint "npm run unittest" backend
  after_script:
    - echo "[x] Backend successfully tested !"